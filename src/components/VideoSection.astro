---
import SoundControl from "../components/client/SoundControl";
import Cover from "../assets/video/cover.png";
import { Image } from "astro:assets";
---

<section id="support" class="relative flex w-full flex-col items-center pt-10">
    <div class="mx-auto mb-10 max-w-5xl lg:mb-16">
        <h3
            class="title text-center text-3xl font-semibold text-[#141392] lg:text-5xl"
        >
            <div class="line-h3">
                <span class="block">We back feminists</span>
            </div>
            <div class="line-h3">
                <span class="block">fighting for change</span>
            </div>
        </h3>
    </div>
    <div
        class="relative mx-5 aspect-video overflow-hidden rounded-3xl lg:mx-0 lg:max-w-5xl"
    >
        <!-- <SoundControl videoElem={"videoElem"} client:load /> -->
        <!-- <video
            playsinline
            muted
            id="videoElem"
            class="mx-auto max-w-full object-cover"
            src="/Mama-Cash.webm"></video> -->
    </div>
    <div class="relative mx-auto w-full max-w-5xl">
        <div
            class="video-block video-block_full-width w-full overflow-hidden rounded-2xl"
        >
            <div class="video-block__container relative">
                <!-- <div class="absolute bottom-5 right-5 z-[2000] hidden lg:block">
                    <SoundControl videoElem={"videoElem"} client:load />
                </div> -->
                <figure class="video">
                    <div
                        class="overlay-wrapper absolute z-10 hidden h-full w-full items-center justify-center lg:flex"
                    >
                        <Image
                            src={Cover}
                            alt="video_cover"
                            class="absolute left-0 top-0"
                        />
                        <div
                            class="overlay absolute flex h-full w-full items-center justify-center"
                        >
                            <button class="play_button">
                                <div class="pulse"></div>
                                <div class="circle"></div>
                                <svg
                                    class="relative"
                                    width="50"
                                    height="50"
                                    viewBox="0 0 100 100"
                                >
                                    <polygon points="40,30 65,50 40,70"
                                    ></polygon>
                                </svg>
                            </button>
                        </div>
                    </div>
                    <video
                        class="w-full cursor-pointer"
                        id="videoElem"
                        poster="/cover.png"
                        playsinline
                    >
                        <source src="/Mama-Cash.webm#t=0" type="video/webm" />
                        <source src="/Mama-Cash.mp4#t=0" type="video/mp4" />
                    </video>
                </figure>
            </div>
        </div>
    </div>
</section>

<style>
    .overlay-wrapper img,
    .overlay-wrapper .overlay,
    .overlay-wrapper .overlay .play_button {
        @apply transition-all duration-500 ease-in-out;
    }
    .overlay-wrapper.playing img {
        display: none;
    }
    /* .overlay-wrapper:hover img {
        scale: 1.05;
    } */
    .overlay-wrapper:hover .overlay {
        @apply bg-opacity-30;
    }
    .overlay-wrapper:hover .overlay .play_button {
        scale: 1.1;
    }
    .overlay-wrapper .overlay {
        @apply bg-[#212121] bg-opacity-10;
    }
    .overlay-wrapper .overlay .play_button {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .overlay-wrapper .overlay .play_button .circle {
        position: absolute;
        width: 50px;
        height: 50px;
        border-radius: 9999rem;
        background-position:
            0px 0px,
            0px 0px,
            0px 0px;
        background-image: linear-gradient(
                180deg,
                hsla(0, 0%, 95.3%, 0.94),
                hsla(0, 0%, 95.3%, 0.94)
            ),
            url("/635934446d2865655d814bb0_noise.webp"),
            linear-gradient(180deg, #f3f3f3, #f3f3f3);
        background-size: auto, 128px, auto;
        overflow-x: hidden;
    }
    .overlay-wrapper .overlay .play_button .pulse {
        width: 55px;
        height: 55px;
        background: #fafafa6a;
        border-radius: 9999rem;
        position: absolute;
        filter: blur(2px);
        animation-timing-function: ease;
        animation: pulse 3s infinite;
    }
    .overlay-wrapper .overlay .play_button svg {
        stroke-linejoin: round;
        stroke-width: 5;
        stroke: #141392;
        fill: #141392;
        transition: all 0.3s;
    }

    @keyframes pulse {
        0% {
            transform: scale(1, 1);
        }
        25% {
            transform: scale(1, 1);
        }
        50% {
            transform: scale(1.1, 1.1);
        }
        100% {
            transform: scale(1, 1);
        }
    }
</style>

<script>
    import gsap from "gsap";

    const overlayWrapper = document.querySelector(".overlay-wrapper");
    // const overlay = overlayWrapper.querySelector(".overlay");
    const play = overlayWrapper.querySelector(
        ".play_button",
    ) as HTMLButtonElement;

    const element = document.querySelector(".video-block");
    const figure = document.querySelector(".video");

    const video = document.getElementById("videoElem") as HTMLVideoElement;

    const onVideoPlay = () => {
        gsap.to(play, {
            opacity: 0,
            scale: 4,
            onComplete: () => {
                gsap.to(overlayWrapper, {
                    opacity: 0,
                    pointerEvents: "none",
                });
            },
        });
    };

    const onVideoPause = (showCover = false) => {
        if (showCover) overlayWrapper.classList.remove("playing");
        else overlayWrapper.classList.add("playing");
        let tl = gsap.timeline();
        tl.fromTo(
            play,
            {
                scale: 3,
            },
            {
                scale: 1,
                opacity: 1,
                duration: 0.2,
            },
        );
        tl.to(
            overlayWrapper,
            {
                opacity: 1,
                pointerEvents: "all",
            },
            "<",
        );
    };

    video.addEventListener("ended", () => onVideoPause(true));

    video.addEventListener("play", () => onVideoPlay());

    video.addEventListener("pause", () => onVideoPause());

    // video.addEventListener("click", () => {
    //     video.pause();
    // });

    play.addEventListener("click", () => video.play());

    gsap.fromTo(
        figure,
        {
            y: "-50%",
        },
        {
            scrollTrigger: {
                trigger: element,
                start: "top bottom",
                end: "top top",
                scrub: true,
                // markers: true,
                refreshPriority: 0,
            },
            y: "0%",
            duration: 0.5,
            onStart: () => {
                // video.pause();
            },
        },
    );

    ///

    let mm = gsap.matchMedia();

    mm.add("(min-width: 1024px)", () => {
        video.addEventListener("click", () => {
            video.pause();
        });
    });

    mm.add("(max-width: 1023px)", () => {
        video.controls = true;
        let tl = gsap.timeline({
            scrollTrigger: {
                trigger: "#support",
                start: "top 20%",
                end: "bottom top",
                // markers: true,
                scrub: true,
                pin: true,
            },
        });

        tl.to("#support", {
            yPercent: -10,
        });

        tl.fromTo(
            element,
            {
                padding: "0 24px",
                borderRadius: "18px",
            },
            {
                padding: 0,
                borderRadius: 0,
            },
        );
    });
</script>

<!-- <style>
    /* figure.video {
        margin: 0;
    } */
    /* 
    .video-block__container {
        overflow: hidden;
        position: relative;
        width: 100%;
        height: 100%;
        height: calc(var(--vh) * 100);
    }

    .video-block figure.video {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
    }

    .video-block video {
        height: 100%;
        object-fit: cover;
    }

    .video-block_full-width {
        max-width: calc(var(--vw) * 100);
        margin-left: calc(50% - (var(--vw) * 50));
        margin-right: calc(50% - (var(--vw) * 50));
        width: auto;
        overflow: hidden;
    } */
</style> -->
<!-- 
<script>
    import gsap from "gsap";

    const setVwVh = () => {
        let vw = document.documentElement.clientWidth / 100;
        let vh = document.documentElement.clientHeight / 100;
        document.documentElement.style.setProperty("--vw", `${vw}px`);
        document.documentElement.style.setProperty("--vh", `${vh}px`);
    };

    const videoBlock = () => {
        const maxWidth = 1024;
        const gap = 0;
        const element = document.querySelector(".video-block");
        const container = element.querySelector(".video-block__container");
        const figure = element.querySelector("figure.video");
        const video = element.querySelector("video");

        // get values to animate clipPath property
        const getClipPath = () => {
            let insetX = (window.innerWidth - maxWidth - gap) / 2;
            let insetY = (window.innerHeight - 768 - gap) / 2;

            insetX = insetX > 0 ? insetX : gap;
            insetY = insetY > 0 ? insetY : gap;

            return `inset(${insetY}px ${insetX}px)`;
        };

        let isPlaying = false;

        // On video playing toggle values
        video.onplaying = function () {
            isPlaying = true;
        };

        // On video pause toggle values
        video.onpause = function () {
            isPlaying = false;
        };

        // pause the video and hide the caption
        const videoPause = () => {
            if (video && !video.paused && isPlaying) {
                video.pause();
                video.muted = true;
            }
        };

        // play the video and show the caption
        const videoPlay = async () => {
            if (video && video.paused && !isPlaying) {
                return await video.play();
            }
        };

        // add parallax effect to the video before expanding
        // gsap.fromTo(
        //     figure,
        //     {
        //         clipPath: getClipPath,
        //         y: "-50%",
        //     },
        //     {
        //         scrollTrigger: {
        //             trigger: element,
        //             start: "top bottom",
        //             end: "top top",
        //             scrub: true,
        //             //markers: true
        //         },
        //         y: "0%",
        //         duration: 0.5,
        //         onStart: () => {
        //             videoPause();
        //         },
        //     },
        // );

        // init timeline
        // let tl = gsap.timeline({
        //     scrollTrigger: {
        //         trigger: container,
        //         start: "top top",
        //         // end: () => window.innerHeight * 4,
        //         end: "bottom top",
        //         scrub: true,
        //         pin: container,
        //         // markers: true,
        //         refreshPriority: 0,
        //     },
        // });

        // expand the video block
        // tl.fromTo(
        //     figure,
        //     {
        //         clipPath: getClipPath,
        //     },
        //     {
        //         clipPath: `inset(0px 0px)`,
        //         duration: 0.5,
        //         onUpdate: () => {
        //             videoPause();
        //         },
        //         onComplete: () => {
        //             videoPlay();
        //         },
        //     },
        // );

        // keep the video block untouched on scrolling for a while
        // tl.fromTo(
        //     figure,
        //     {
        //         opacity: 1,
        //     },
        //     {
        //         opacity: 1,
        //         duration: 1,
        //         onUpdate: () => {
        //             videoPlay();
        //         },
        //         onComplete: () => {
        //             videoPause();
        //         },
        //     },
        // );

        // shrink the video block to initial state
        // tl.fromTo(
        //     figure,
        //     {
        //         clipPath: `inset(0px 0px)`,
        //     },
        //     {
        //         clipPath: getClipPath,
        //         duration: 0.5,
        //     },
        // );
    };

    addEventListener("DOMContentLoaded", setVwVh);
    addEventListener("resize", setVwVh);
    addEventListener("DOMContentLoaded", videoBlock);

    let mm = gsap.matchMedia();
    mm.add("(min-width: 1024px)", () => {});

    mm.add("(max-width: 1023px)", () => {
        const element = document.querySelector(".video-block");
        const container = element.querySelector(".video-block__container");
        const figure = element.querySelector("figure.video");
        const video = element.querySelector("video");
        const fullscreen = element.querySelector("#fullscreen");

        var isSafari = /^((?!chrome|android).)*safari/i.test(
            navigator.userAgent,
        );
        if (isSafari) {
            video.controls = true;
        }

        // fullscreen.addEventListener("click", () => {
        //     if (video.requestFullscreen) {
        //         video.requestFullscreen();
        //     }
        // });

        let tl = gsap.timeline({
            scrollTrigger: {
                trigger: "#support",
                start: "top 20%",
                end: "bottom top",
                // markers: true,
                scrub: true,
                pin: true,
            },
        });

        tl.to("#support", {
            yPercent: -10,
        });

        tl.fromTo(
            element,
            {
                margin: "0 24px",
                borderRadius: "18px",
            },
            {
                margin: 0,
                borderRadius: 0,
            },
        );

        gsap.to(video, {
            scrollTrigger: {
                refreshPriority: 0,
                trigger: "#support",
                start: "top 40%",
                end: "bottom 40%",
                onEnter: () => {
                    video.play();
                },
                onEnterBack: () => {
                    video.play();
                },
                onLeave: () => {
                    video.pause();
                },
                onLeaveBack: () => {
                    video.pause();
                },
                // markers: true,
            },
            // onComplete: () => {
            //     video.play();
            // },
        });

        gsap.fromTo(
            figure,
            {
                // clipPath: getClipPath,
                y: "-100%",
            },
            {
                scrollTrigger: {
                    trigger: element,
                    start: "top bottom",
                    end: "top center",
                    scrub: true,

                    // markers: true,
                },
                y: "0%",
                duration: 0.5,

                onStart: () => {
                    // videoPause();
                },
            },
        );
    });
</script> -->
