---
import SoundControl from "../components/client/SoundControl";
---

<section id="support" class="relative flex w-full flex-col items-center pt-10">
    <div class="mx-auto mb-10 max-w-5xl lg:mb-16">
        <h3
            class="title text-center text-3xl font-semibold text-[#141392] lg:text-5xl"
        >
            <div class="line-h3">
                <span class="block">We back feminists</span>
            </div>
            <div class="line-h3">
                <span class="block">fighting for change</span>
            </div>
        </h3>
    </div>
    <div
        class="relative mx-5 aspect-video overflow-hidden rounded-3xl lg:mx-0 lg:max-w-5xl"
    >
        <!-- <SoundControl videoElem={"videoElem"} client:load /> -->
        <!-- <video
            playsinline
            muted
            id="videoElem"
            class="mx-auto max-w-full object-cover"
            src="/Mama-Cash.webm"></video> -->
    </div>
    <div class="relative mx-auto w-full max-w-5xl">
        <div class="video-block video-block_full-width w-full">
            <div class="video-block__container">
                <div class="absolute bottom-5 right-5 z-[2000] hidden lg:block">
                    <SoundControl videoElem={"videoElem"} client:load />
                </div>
                <figure class="video">
                    <!-- <div class="absolute bottom-2 right-2 z-[2000] lg:hidden">
                        <div class="flex gap-3">
                            <button
                                id="fullscreen"
                                class="rounded-full bg-white p-[2px] shadow-sm"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    style="fill: rgb(0, 0, 0); --darkreader-inline-fill: #e8e6e3;"
                                    data-darkreader-inline-fill=""
                                    ><path
                                        d="M5 5h5V3H3v7h2zm5 14H5v-5H3v7h7zm11-5h-2v5h-5v2h7zm-2-4h2V3h-7v2h5z"
                                    ></path></svg
                                >
                            </button>
                        </div>
                    </div> -->
                    <video
                        class="w-full"
                        id="videoElem"
                        poster="/cover.png"
                        loop
                        muted
                        playsinline
                        src="/Mama-Cash.webm#t=3"></video>
                </figure>
            </div>
        </div>
    </div>
</section>

<style>
    figure.video {
        margin: 0;
    }

    .video-block__container {
        overflow: hidden;
        position: relative;
        width: 100%;
        height: 100%;
        height: calc(var(--vh) * 100);
    }

    .video-block figure.video {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
    }

    .video-block video {
        height: 100%;
        object-fit: cover;
    }

    .video-block_full-width {
        max-width: calc(var(--vw) * 100);
        margin-left: calc(50% - (var(--vw) * 50));
        margin-right: calc(50% - (var(--vw) * 50));
        width: auto;
        overflow: hidden;
    }
</style>

<script>
    import gsap from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";

    const setVwVh = () => {
        let vw = document.documentElement.clientWidth / 100;
        let vh = document.documentElement.clientHeight / 100;
        document.documentElement.style.setProperty("--vw", `${vw}px`);
        document.documentElement.style.setProperty("--vh", `${vh}px`);
    };

    const expandableVideoBlock = () => {
        const maxWidth = 1024;
        const gap = 0;
        const element = document.querySelector(".video-block");
        const container = element.querySelector(".video-block__container");
        const figure = element.querySelector("figure.video");
        const video = element.querySelector("video");

        // get values to animate clipPath property
        const getClipPath = () => {
            let insetX = (window.innerWidth - maxWidth - gap) / 2;
            let insetY = (window.innerHeight - 768 - gap) / 2;

            insetX = insetX > 0 ? insetX : gap;
            insetY = insetY > 0 ? insetY : gap;

            return `inset(${insetY}px ${insetX}px)`;
        };

        let isPlaying = false;

        // On video playing toggle values
        video.onplaying = function () {
            isPlaying = true;
        };

        // On video pause toggle values
        video.onpause = function () {
            isPlaying = false;
        };

        // pause the video and hide the caption
        const videoPause = () => {
            if (video && !video.paused && isPlaying) {
                video.pause();
                video.muted = true;
            }
        };

        // play the video and show the caption
        const videoPlay = async () => {
            if (video && video.paused && !isPlaying) {
                return await video.play();
            }
        };

        // add parallax effect to the video before expanding
        gsap.fromTo(
            figure,
            {
                clipPath: getClipPath,
                y: "-50%",
            },
            {
                scrollTrigger: {
                    trigger: element,
                    start: "top bottom",
                    end: "top top",
                    scrub: true,
                    //markers: true
                },
                y: "0%",
                duration: 0.5,
                onStart: () => {
                    videoPause();
                },
            },
        );

        // init timeline
        let tl = gsap.timeline({
            scrollTrigger: {
                trigger: container,
                start: "top top",
                // end: () => window.innerHeight * 4,
                end: "bottom top",
                scrub: true,
                pin: container,
                // markers: true,
                refreshPriority: 0,
            },
        });

        // expand the video block
        tl.fromTo(
            figure,
            {
                clipPath: getClipPath,
            },
            {
                clipPath: `inset(0px 0px)`,
                duration: 0.5,
                onUpdate: () => {
                    videoPause();
                },
                onComplete: () => {
                    videoPlay();
                },
            },
        );

        // keep the video block untouched on scrolling for a while
        tl.fromTo(
            figure,
            {
                opacity: 1,
            },
            {
                opacity: 1,
                duration: 1,
                onUpdate: () => {
                    videoPlay();
                },
                onComplete: () => {
                    videoPause();
                },
            },
        );

        // shrink the video block to initial state
        tl.fromTo(
            figure,
            {
                clipPath: `inset(0px 0px)`,
            },
            {
                clipPath: getClipPath,
                duration: 0.5,
            },
        );
    };

    let mm = gsap.matchMedia();
    mm.add("(min-width: 1024px)", () => {
        addEventListener("DOMContentLoaded", setVwVh);
        addEventListener("resize", setVwVh);
        addEventListener("DOMContentLoaded", expandableVideoBlock);
    });

    mm.add("(max-width: 1023px)", () => {
        const element = document.querySelector(".video-block");
        const container = element.querySelector(".video-block__container");
        const figure = element.querySelector("figure.video");
        const video = element.querySelector("video");
        const fullscreen = element.querySelector("#fullscreen");

        var isSafari = /^((?!chrome|android).)*safari/i.test(
            navigator.userAgent,
        );
        if (isSafari) {
            video.controls = true;
        }

        // fullscreen.addEventListener("click", () => {
        //     if (video.requestFullscreen) {
        //         video.requestFullscreen();
        //     }
        // });

        let tl = gsap.timeline({
            scrollTrigger: {
                trigger: "#support",
                start: "top 20%",
                end: "bottom top",
                // markers: true,
                scrub: true,
                pin: true,
            },
        });

        tl.to("#support", {
            yPercent: -10,
        });

        tl.fromTo(
            element,
            {
                margin: "0 24px",
                borderRadius: "18px",
            },
            {
                margin: 0,
                borderRadius: 0,
            },
        );

        gsap.to(video, {
            scrollTrigger: {
                refreshPriority: 0,
                trigger: "#support",
                start: "top 40%",
                end: "bottom 40%",
                onEnter: () => {
                    video.play();
                },
                onEnterBack: () => {
                    video.play();
                },
                onLeave: () => {
                    video.pause();
                },
                onLeaveBack: () => {
                    video.pause();
                },
                // markers: true,
            },
            // onComplete: () => {
            //     video.play();
            // },
        });

        gsap.fromTo(
            figure,
            {
                // clipPath: getClipPath,
                y: "-100%",
            },
            {
                scrollTrigger: {
                    trigger: element,
                    start: "top bottom",
                    end: "top center",
                    scrub: true,

                    // markers: true,
                },
                y: "0%",
                duration: 0.5,

                onStart: () => {
                    // videoPause();
                },
            },
        );
    });
</script>
